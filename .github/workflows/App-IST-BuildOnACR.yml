# This workflow demonstrates ACR building and storing a container image, and deploying to Kubernetes
# It is split into separate jobs for readability but could be squashed into a single job if that best suits your scenario
name: App Deploy IST to ACR

on:
  workflow_dispatch:
    inputs:
      RG:
        description: 'The Resource Group where your resources are deployed'
        required: true
        default: "rg-ist-eastus-010"
        type: string
      ACRNAME:
        description: 'The Name of the ACR resource'
        required: true
        default: "acraksp4n4frfqsq276"
        type: string
      APPNAME:
        description: 'The Name of the Application to deploy'
        required: true
        type: string
        default: "istapi"
      APPREPO:
        description: 'The GitHub App code repo'
        default: "cse-labs/Project100k"
        required: false
        type: string
      APPREPOREF:
        description: 'The GitHub REF to use when referencing the App code repo'
        default: "main"
        required: false
        type: string
      APPREPOPATH:
        description: 'The directory in the repo containing the Dockerfile'
        default: "."
        required: false
        type: string
      ENVIRONMENT:
        description: 'A GitHub Environment to pull action secrets from'
        required: true
        type: environment

    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      GH_PAT:
        required: true

permissions:
      id-token: write
      contents: read

jobs:
  BuildPush:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.ENVIRONMENT }}
    env:
      APPNAME: "${{ github.event.inputs.APPNAME }}"
      ACRNAME: "${{ github.event.inputs.ACRNAME}}"
      RG: "${{ github.event.inputs.RG }}"

    steps:
      - name: Get application code from repo
        uses: actions/checkout@v2
        with:
          repository: ${{  github.event.inputs.APPREPO}}
          ref: ${{ github.event.inputs.APPREPOREF}}
          token: ${{ secrets.GH_PAT }}

      - name: Job parameter inspection
        run: |
          echo "RG is ${{  github.event.inputs.RG }}"
          echo "AKS name is ${{ github.event.inputs.AKSNAME }}"

      - name: Azure Login
        uses: Azure/login@v1.4.3
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: ACR build
        id: acrbuild
        env:
          ACRSERVER: "${{ env.ACRNAME }}.azurecr.io"
          APPREPOPATH: "${{ inputs.APPREPOPATH}}"
          IMAGEREPO: "${{ inputs.APPNAME }}"
        run: |
          echo "Verifying directory contents in repo path $APPREPOPATH"
          ls $APPREPOPATH

          echo "Downcasing $ACRSERVER for valid repository name"
          REPOSITORY=$(echo $ACRSERVER | tr '[:upper:]' '[:lower:]')

          echo "Adding network rule"
          az acr update --name $ACRNAME --public-network-enabled true
          CURRENT_IP_ADDRESS=$(curl -s -4 https://ifconfig.io)
          echo $CURRENT_IP_ADDRESS
          az acr network-rule add -n $ACRNAME --ip-address ${CURRENT_IP_ADDRESS}

          echo "Requesting ACR build on $ACRSERVER for image $IMAGEREPO:${{ github.sha }}"
          az acr build -t $REPOSITORY/$IMAGEREPO:${{ github.sha }} -r $ACRNAME $APPREPOPATH/.

          echo "Removing network rule"
          az acr network-rule remove -n $ACRNAME --ip-address ${CURRENT_IP_ADDRESS}
          az acr update --name $ACRNAME --public-network-enabled false

